diff --git a/Makefile b/Makefile
index edf5a0c..7d94d52 100644
--- a/Makefile
+++ b/Makefile
@@ -117,6 +117,7 @@ UGOBJ           =       ug/paraLoadCoordinator.o \
 			ug/paraSolverTerminationState.o \
 			ug/paraSysTimer.o \
 			ug/gzstream.o \
+			ug/ErlPortInterface.o \
 			ug/uggithash.o
 
 
diff --git a/src/ug/paraCommMpi.cpp b/src/ug/paraCommMpi.cpp
index 0cbd9f2..bf5059e 100644
--- a/src/ug/paraCommMpi.cpp
+++ b/src/ug/paraCommMpi.cpp
@@ -657,13 +657,22 @@ ParaCommMpi::usend(
    int count,
    MPI_Datatype datatype,
    int dest,
-   const int tag
+   const int tag,
+   bool block
    )
 {
+    if (block) {
    MPI_CALL (
       MPI_Send( buffer, count, datatype, dest, tag, myComm )
       // MPI_Ssend( buffer, count, datatype, dest, tag, myComm )  // after racing, program hang
    );
+    } else {
+        MPI_Request req;
+   MPI_CALL (
+       MPI_Isend( buffer, count, datatype, dest, tag, myComm, &req)
+      // MPI_Ssend( buffer, count, datatype, dest, tag, myComm )  // after racing, program hang
+   );
+    }
    TAG_TRACE (Send, To, dest, tag);
    return 0;
 }
diff --git a/src/ug/paraCommMpi.h b/src/ug/paraCommMpi.h
index aa3b12e..44390e0 100644
--- a/src/ug/paraCommMpi.h
+++ b/src/ug/paraCommMpi.h
@@ -241,7 +241,7 @@ public:
 
    /** For Created Datatypes */
    int ubcast( void* buffer, int count, MPI_Datatype datatype, int root );
-   int usend( void* bufer, int count, MPI_Datatype datatype, int dest, int tag );
+    int usend( void* bufer, int count, MPI_Datatype datatype, int dest, int tag, bool block=true );
    int ureceive( void* bufer, int count, MPI_Datatype datatype, int source, int tag );
 
 };
diff --git a/src/ug/paraInitiator.h b/src/ug/paraInitiator.h
index 59f9cdb..3352bd6 100644
--- a/src/ug/paraInitiator.h
+++ b/src/ug/paraInitiator.h
@@ -43,6 +43,8 @@
 #include "ugs/ugsParaCommMpi.h"
 #endif
 
+#define UG_WITH_DDBNB
+
 namespace UG
 {
 
@@ -272,6 +274,20 @@ public:
    virtual void writeUgsIncumbentSolution(UGS::UgsParaCommMpi *ugsComm) = 0;
 #endif
 
+#ifdef UG_WITH_DDBNB
+   /** start reading DDBNB incumbent solutions from outside **/
+   virtual void startDDBNBComm() = 0;
+
+   /** stop reading DDBNB incumbent solutions from outside **/
+   virtual void stopDDBNBComm() = 0;
+
+   /** write DDBNB incumbent solution **/
+   virtual void writeDDBNBIncumbentSolution() = 0;
+
+   /** check pipes and read DDBNB incumbent solution **/
+   virtual void checkAndReadDDBNBIncumbentSolution() = 0;
+#endif
+
 };
 
 typedef ParaInitiator *ParaInitiatorPtr;
diff --git a/src/ug/paraLoadCoordinator.cpp b/src/ug/paraLoadCoordinator.cpp
index 65f741d..16db159 100644
--- a/src/ug/paraLoadCoordinator.cpp
+++ b/src/ug/paraLoadCoordinator.cpp
@@ -524,6 +524,10 @@ ParaLoadCoordinator::~ParaLoadCoordinator(
 #ifdef UG_WITH_UGS
          if( commUgs ) checkAndReadIncumbent();
 #endif
+#ifdef UG_WITH_DDBNB
+         paraInitiator->checkAndReadDDBNBIncumbentSolution();
+#endif
+
 
          if( nTerminated == paraSolverPool->getNSolvers() ) break;
       }
@@ -1005,6 +1009,9 @@ ParaLoadCoordinator::processTagSolution(
       {
          paraInitiator->writeUgsIncumbentSolution(commUgs);
       }
+#endif
+#ifdef UG_WITH_DDBNB
+      paraInitiator->writeDDBNBIncumbentSolution();
 #endif
    }
    else
@@ -3020,6 +3027,9 @@ ParaLoadCoordinator::run(
 #ifdef UG_WITH_UGS
       if( commUgs ) checkAndReadIncumbent();
 #endif
+#ifdef UG_WITH_DDBNB
+      paraInitiator->checkAndReadDDBNBIncumbentSolution();
+#endif
 
       /** completion message may delay */
       if( paraRacingSolverPool && paraRacingSolverPool->getNumActiveSolvers() == 0 )
@@ -3347,6 +3357,9 @@ ParaLoadCoordinator::restartInRampDownPhase(
 #ifdef UG_WITH_UGS
       if( commUgs ) checkAndReadIncumbent();
 #endif
+#ifdef UG_WITH_DDBNB
+      paraInitiator->checkAndReadDDBNBIncumbentSolution();
+#endif
 
       if( paraSolverPool->getNumActiveSolvers() == 0 )
       {
@@ -4817,6 +4830,9 @@ ParaLoadCoordinator::run(
 #ifdef UG_WITH_UGS
       if( commUgs ) checkAndReadIncumbent();
 #endif
+#ifdef UG_WITH_DDBNB
+      paraInitiator->checkAndReadDDBNBIncumbentSolution();
+#endif
 
       /** output tabular solving status */
       if( outputTabularSolvingStatusFlag && (!racingTermination) &&
diff --git a/src/ug/paraSolution.h b/src/ug/paraSolution.h
index 7414525..f6138c5 100644
--- a/src/ug/paraSolution.h
+++ b/src/ug/paraSolution.h
@@ -65,7 +65,7 @@ public:
    virtual void bcast(ParaComm *comm, int root) = 0;
 
    /** send solution data to the rank */
-   virtual void send(ParaComm *comm, int destination) = 0;
+   virtual void send(ParaComm *comm, int destination, bool block=true) = 0;
 
    /** receive solution data from the source rank */
    virtual void receive(ParaComm *comm, int source) = 0;
diff --git a/src/ug_scip/parascip.cpp b/src/ug_scip/parascip.cpp
index e2a690c..5fee038 100644
--- a/src/ug_scip/parascip.cpp
+++ b/src/ug_scip/parascip.cpp
@@ -278,6 +278,9 @@ main (
          paraLc = new ParaLoadCoordinator(comm, paraParamSet, paraInitiator, &racingSolversExist, paraTimer, detTimer);
 #endif
       }
+#ifdef UG_WITH_DDBNB
+      paraInitiator->startDDBNBComm();
+#endif
       if( paraInitiator->isWarmStarted() )
       {
 #ifdef UG_WITH_ZLIB
@@ -319,6 +322,9 @@ main (
             THROW_LOGICAL_ERROR2("Invalid RampUpPhaseProcess: ", paraParamSet->getIntParamValue(RampUpPhaseProcess) )
          }
       }
+#ifdef UG_WITH_DDBNB
+      paraInitiator->stopDDBNBComm();
+#endif
       delete paraLc;
       if( paraInitiator ) delete paraInitiator;
    }
diff --git a/src/ug_scip/scipParaInitiator.cpp b/src/ug_scip/scipParaInitiator.cpp
index f363400..983e2e5 100644
--- a/src/ug_scip/scipParaInitiator.cpp
+++ b/src/ug_scip/scipParaInitiator.cpp
@@ -38,6 +38,11 @@
 #include "scip/debug.h"
 #endif
 
+#ifdef UG_WITH_DDBNB
+#include "ug/ErlPortInterface.h"
+ErlPortInterface g_portInterface;
+#endif
+
 // #define UG_SCIP_SOL_FEASIBILITY_CHECK_IN_LC
 
 using namespace UG;
@@ -330,6 +335,13 @@ ScipParaInitiator::init(
       {
          i++;
       }
+#endif
+#ifdef UG_WITH_DDBNB
+      else if( strcmp(argv[i], "-ddbnb") == 0 )
+      {
+         i++;
+         ddbnbEnabled = true;
+      }
 #endif
       else
       {
@@ -2358,3 +2370,123 @@ ScipParaInitiator::writeUgsIncumbentSolution(
    return;
 }
 #endif
+
+#ifdef UG_WITH_DDBNB
+
+class ParaSCIPBestValueAcceptor : public BestValueAcceptor
+{
+    ParaComm *_paraComm;
+    SCIP *scip;
+public:
+    ParaSCIPBestValueAcceptor(ParaComm *paraComm, SCIP *pScip)
+        : _paraComm(paraComm)
+    {
+        this->scip = pScip;
+    }
+    void acceptNewBestValue(double bestVal, uint16_t seqNumber)
+    {
+        DEF_SCIP_PARA_COMM( scipParaComm, _paraComm );
+        SCIP_SOL *origSol;
+        SCIP_CALL_ABORT( SCIPcreateOrigSol(scip, &origSol, NULL) );
+        SCIP_Bool partial = FALSE;
+        SCIP_Bool error = FALSE;
+        std::ostringstream s;
+        s << "insol-" << seqNumber << ".sol";
+
+        SCIP_CALL_ABORT( SCIPreadSolFile(scip, s.str().c_str(), origSol,
+                FALSE, &partial, &error ) );
+        std::cout << "################## partial = " << partial << ", error = " << error << " ##############" << std::endl;
+      if( (!partial) && (!error) )
+      {
+         SCIP_Bool stored = FALSE;
+         SCIP_CALL_ABORT( SCIPtrySol(scip, origSol, FALSE, TRUE, TRUE, TRUE, FALSE, &stored) );
+
+         std::cout << "################## stored = " << stored << " ##############" << std::endl;
+
+         if( 1 || stored )
+         {
+             SCIP_SOL *sol = origSol;//SCIPgetBestSol(scip);
+            int nVars = SCIPgetNVars(scip);
+            SCIP_VAR **vars = SCIPgetVars(scip);
+            SCIP_Real *vals = new SCIP_Real[nVars];
+            SCIP_CALL_ABORT( SCIPgetSolVals(scip, sol, nVars, vars, vals) );
+            //for (int i = 0 ; i < nVars; ++i) {
+            //    std::cout << i << " "<< vars[i] << " " <<  vals[i] << " " << SCIPvarGetIndex(vars[i]) << " " << SCIPvarGetProbindex(vars[i]) << " " << SCIPvarGetName(vars[i]) << std::endl;
+            //}
+
+            ParaSolution *solution = scipParaComm->createScipParaSolution(
+                           0,
+                           SCIPgetSolTransObj(scip, sol),  // Only this value may be used
+                           nVars,
+                           vars,
+                           vals
+                           );
+            delete [] vals;
+            std::cout << "sol almost sent" << std::endl;
+            solution->send(scipParaComm, 0, false);
+            std::cout << "sol sent" << std::endl;
+         }
+      }
+
+      SCIP_CALL_ABORT( SCIPfreeSol(scip, &origSol) );
+    }
+};
+
+void ScipParaInitiator::startDDBNBComm()
+{
+    g_portInterface.initialize(ddbnbEnabled);
+}
+
+void ScipParaInitiator::stopDDBNBComm()
+{
+    if (solution && seqNumber) {
+        g_portInterface.writeResult("optimal", convertToExternalValue(
+                solution->getObjectiveFuntionValue()));
+    } else {
+        g_portInterface.writeResult("infeasible", 1e23);
+    }
+}
+
+void ScipParaInitiator::writeDDBNBIncumbentSolution()
+{
+   /* Write out the solution */
+   seqNumber++;
+   std::ostringstream s;
+   s << "outsol-" << seqNumber << ".sol";
+   FILE *fp = fopen(s.str().c_str(), "w");
+   if( fp == NULL )
+   {
+      fprintf (stderr, "Cannot open solution file to write. File name = %s\n", s.str().c_str());
+      exit(1);
+   }
+
+   SCIP_SOL* sol = SCIPgetBestSol(scip);
+
+   assert(sol);
+   fprintf( fp, "# ");
+
+   SCIP_CALL_ABORT( SCIPprintSol(scip, sol, fp, FALSE) );
+
+   fclose(fp);
+
+   if (!g_portInterface.setBestValue(convertToExternalValue(
+               solution->getObjectiveFuntionValue()), true, seqNumber))
+   {
+       seqNumber--;
+       remove(s.str().c_str());
+   }
+   else{
+     std::cout << "LC: NEW INCUMBENT DDBNB"  << std::endl;
+   }
+   //std::cout << "LC: NEW INCUMBENT ACCEPTED " << sol->getObjectiveFuntionValue() << " " <<
+   //    paraInitiator->convertToExternalValue(sol->getObjectiveFuntionValue()) << std::endl;
+   //paraInitiator->writeDDBNBIncumbentSolution();
+}
+
+void ScipParaInitiator::checkAndReadDDBNBIncumbentSolution()
+{
+    ParaSCIPBestValueAcceptor acceptor(paraComm, scip);
+    g_portInterface.getBestValue(acceptor);
+}
+
+#endif
diff --git a/src/ug_scip/scipParaInitiator.h b/src/ug_scip/scipParaInitiator.h
index 529cc1f..08c419a 100644
--- a/src/ug_scip/scipParaInitiator.h
+++ b/src/ug_scip/scipParaInitiator.h
@@ -49,6 +49,7 @@ namespace ParaSCIP
 /** Initiator class */
 class ScipParaInitiator : public UG::ParaInitiator
 {
+public:
    UG::ParaParamSet     *paraParams;
    ScipParaInstance     *instance;
    ScipParaSolution     *solution;
@@ -78,6 +79,10 @@ class ScipParaInitiator : public UG::ParaInitiator
 #ifdef UG_WITH_UGS
    int                  seqNumber;
 #endif
+#ifdef UG_WITH_DDBNB
+   int                  seqNumber;
+   bool ddbnbEnabled;
+#endif
 
    bool addRootNodeCuts();
    void outputProblemInfo(int *nNonLinearConsHdlrs);
@@ -95,6 +100,9 @@ public:
             absgap(-1.0), gap(-1.0), objlimit(DBL_MAX)
 #ifdef UG_WITH_UGS
             , seqNumber(0)
+#endif
+#ifdef UG_WITH_DDBNB
+            , seqNumber(0), ddbnbEnabled(false)
 #endif
    {
    }
@@ -321,6 +329,20 @@ public:
    void writeUgsIncumbentSolution(UGS::UgsParaCommMpi *ugsComm);
 #endif
 
+#ifdef UG_WITH_DDBNB
+   /** start reading DDBNB incumbent solutions from outside **/
+   virtual void startDDBNBComm();
+
+   /** stop reading/writing DDBNB incumbent solutions **/
+   virtual void stopDDBNBComm();
+
+   /** write DDBNB incumbent solution **/
+   virtual void writeDDBNBIncumbentSolution();
+
+   /** check pipes and read DDBNB incumbent solution **/
+   virtual void checkAndReadDDBNBIncumbentSolution();
+#endif
+
 };
 
 typedef ScipParaInitiator *ScipParaInitiatorPtr;
diff --git a/src/ug_scip/scipParaSolution.h b/src/ug_scip/scipParaSolution.h
index b30a858..67cc9b9 100644
--- a/src/ug_scip/scipParaSolution.h
+++ b/src/ug_scip/scipParaSolution.h
@@ -83,7 +83,7 @@ public:
             // std::cout << "*** index: name: value ***" << std::endl;
             for(int i = 0; i < nVars; i++ )
             {
-               indicesAmongSolvers[i] = SCIPvarGetIndex(vars[i]);
+               indicesAmongSolvers[i] = SCIPvarGetProbindex(vars[i]);
                values[i] = vals[i];
                // std::cout << i << ": " << SCIPvarGetName(vars[indicesAmongSolvers[i]]) << ": " << values[i] << std::endl;
                // std::cout << i << ": " << SCIPvarGetName(vars[i]) << ": " << values[i] << std::endl;
diff --git a/src/ug_scip/scipParaSolutionMpi.cpp b/src/ug_scip/scipParaSolutionMpi.cpp
index 92baa00..a00229e 100644
--- a/src/ug_scip/scipParaSolutionMpi.cpp
+++ b/src/ug_scip/scipParaSolutionMpi.cpp
@@ -164,7 +164,7 @@ ScipParaSolutionMpi::bcast(ParaComm *comm, int root)
 
 /** send solution data to the rank */
 void
-ScipParaSolutionMpi::send(ParaComm *comm, int destination)
+ScipParaSolutionMpi::send(ParaComm *comm, int destination, bool block)
 {
    DEF_PARA_COMM( commMpi, comm);
    MPI_Datatype preDatatype;
@@ -173,7 +173,7 @@ ScipParaSolutionMpi::send(ParaComm *comm, int destination)
       MPI_Type_commit( &preDatatype )
    );
    PARA_COMM_CALL(
-      commMpi->usend(&objectiveFunctionValue, 1, preDatatype, destination, TagSolution)
+       commMpi->usend(&objectiveFunctionValue, 1, preDatatype, destination, TagSolution, block)
    );
    MPI_CALL(
       MPI_Type_free( &preDatatype )
@@ -186,7 +186,7 @@ ScipParaSolutionMpi::send(ParaComm *comm, int destination)
          MPI_Type_commit( &datatype )
       );
       PARA_COMM_CALL(
-            commMpi->usend(indicesAmongSolvers, 1, datatype, destination, TagSolution1)
+          commMpi->usend(indicesAmongSolvers, 1, datatype, destination, TagSolution1, block)
       );
       MPI_CALL(
          MPI_Type_free( &datatype )
diff --git a/src/ug_scip/scipParaSolutionMpi.h b/src/ug_scip/scipParaSolutionMpi.h
index d3f80a1..e6cc83d 100644
--- a/src/ug_scip/scipParaSolutionMpi.h
+++ b/src/ug_scip/scipParaSolutionMpi.h
@@ -82,7 +82,7 @@ public:
    void bcast(UG::ParaComm *comm, int root);
 
    /** send solution data to the rank */
-   void send(UG::ParaComm *comm, int destination);
+   void send(UG::ParaComm *comm, int destination, bool block=true);
 
    /** receive solution data from the source rank */
    void receive(UG::ParaComm *comm, int source);
